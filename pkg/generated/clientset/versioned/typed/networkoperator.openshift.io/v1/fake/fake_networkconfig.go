// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	networkoperatoropenshiftiov1 "github.com/openshift/openshift-network-operator/pkg/apis/networkoperator.openshift.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNetworkConfigs implements NetworkConfigInterface
type FakeNetworkConfigs struct {
	Fake *FakeNetworkoperatorV1
	ns   string
}

var networkconfigsResource = schema.GroupVersionResource{Group: "networkoperator.openshift.io", Version: "v1", Resource: "networkconfigs"}

var networkconfigsKind = schema.GroupVersionKind{Group: "networkoperator.openshift.io", Version: "v1", Kind: "NetworkConfig"}

// Get takes name of the networkConfig, and returns the corresponding networkConfig object, and an error if there is any.
func (c *FakeNetworkConfigs) Get(name string, options v1.GetOptions) (result *networkoperatoropenshiftiov1.NetworkConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(networkconfigsResource, c.ns, name), &networkoperatoropenshiftiov1.NetworkConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*networkoperatoropenshiftiov1.NetworkConfig), err
}

// List takes label and field selectors, and returns the list of NetworkConfigs that match those selectors.
func (c *FakeNetworkConfigs) List(opts v1.ListOptions) (result *networkoperatoropenshiftiov1.NetworkConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(networkconfigsResource, networkconfigsKind, c.ns, opts), &networkoperatoropenshiftiov1.NetworkConfigList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &networkoperatoropenshiftiov1.NetworkConfigList{}
	for _, item := range obj.(*networkoperatoropenshiftiov1.NetworkConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested networkConfigs.
func (c *FakeNetworkConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(networkconfigsResource, c.ns, opts))

}

// Create takes the representation of a networkConfig and creates it.  Returns the server's representation of the networkConfig, and an error, if there is any.
func (c *FakeNetworkConfigs) Create(networkConfig *networkoperatoropenshiftiov1.NetworkConfig) (result *networkoperatoropenshiftiov1.NetworkConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(networkconfigsResource, c.ns, networkConfig), &networkoperatoropenshiftiov1.NetworkConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*networkoperatoropenshiftiov1.NetworkConfig), err
}

// Update takes the representation of a networkConfig and updates it. Returns the server's representation of the networkConfig, and an error, if there is any.
func (c *FakeNetworkConfigs) Update(networkConfig *networkoperatoropenshiftiov1.NetworkConfig) (result *networkoperatoropenshiftiov1.NetworkConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(networkconfigsResource, c.ns, networkConfig), &networkoperatoropenshiftiov1.NetworkConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*networkoperatoropenshiftiov1.NetworkConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNetworkConfigs) UpdateStatus(networkConfig *networkoperatoropenshiftiov1.NetworkConfig) (*networkoperatoropenshiftiov1.NetworkConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(networkconfigsResource, "status", c.ns, networkConfig), &networkoperatoropenshiftiov1.NetworkConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*networkoperatoropenshiftiov1.NetworkConfig), err
}

// Delete takes name of the networkConfig and deletes it. Returns an error if one occurs.
func (c *FakeNetworkConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(networkconfigsResource, c.ns, name), &networkoperatoropenshiftiov1.NetworkConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNetworkConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(networkconfigsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &networkoperatoropenshiftiov1.NetworkConfigList{})
	return err
}

// Patch applies the patch and returns the patched networkConfig.
func (c *FakeNetworkConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *networkoperatoropenshiftiov1.NetworkConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(networkconfigsResource, c.ns, name, data, subresources...), &networkoperatoropenshiftiov1.NetworkConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*networkoperatoropenshiftiov1.NetworkConfig), err
}
