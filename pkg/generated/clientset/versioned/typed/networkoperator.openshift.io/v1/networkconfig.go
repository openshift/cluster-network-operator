// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/openshift-network-operator/pkg/apis/networkoperator.openshift.io/v1"
	scheme "github.com/openshift/openshift-network-operator/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NetworkConfigsGetter has a method to return a NetworkConfigInterface.
// A group's client should implement this interface.
type NetworkConfigsGetter interface {
	NetworkConfigs(namespace string) NetworkConfigInterface
}

// NetworkConfigInterface has methods to work with NetworkConfig resources.
type NetworkConfigInterface interface {
	Create(*v1.NetworkConfig) (*v1.NetworkConfig, error)
	Update(*v1.NetworkConfig) (*v1.NetworkConfig, error)
	UpdateStatus(*v1.NetworkConfig) (*v1.NetworkConfig, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.NetworkConfig, error)
	List(opts metav1.ListOptions) (*v1.NetworkConfigList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.NetworkConfig, err error)
	NetworkConfigExpansion
}

// networkConfigs implements NetworkConfigInterface
type networkConfigs struct {
	client rest.Interface
	ns     string
}

// newNetworkConfigs returns a NetworkConfigs
func newNetworkConfigs(c *NetworkoperatorV1Client, namespace string) *networkConfigs {
	return &networkConfigs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the networkConfig, and returns the corresponding networkConfig object, and an error if there is any.
func (c *networkConfigs) Get(name string, options metav1.GetOptions) (result *v1.NetworkConfig, err error) {
	result = &v1.NetworkConfig{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("networkconfigs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NetworkConfigs that match those selectors.
func (c *networkConfigs) List(opts metav1.ListOptions) (result *v1.NetworkConfigList, err error) {
	result = &v1.NetworkConfigList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("networkconfigs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested networkConfigs.
func (c *networkConfigs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("networkconfigs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a networkConfig and creates it.  Returns the server's representation of the networkConfig, and an error, if there is any.
func (c *networkConfigs) Create(networkConfig *v1.NetworkConfig) (result *v1.NetworkConfig, err error) {
	result = &v1.NetworkConfig{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("networkconfigs").
		Body(networkConfig).
		Do().
		Into(result)
	return
}

// Update takes the representation of a networkConfig and updates it. Returns the server's representation of the networkConfig, and an error, if there is any.
func (c *networkConfigs) Update(networkConfig *v1.NetworkConfig) (result *v1.NetworkConfig, err error) {
	result = &v1.NetworkConfig{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("networkconfigs").
		Name(networkConfig.Name).
		Body(networkConfig).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *networkConfigs) UpdateStatus(networkConfig *v1.NetworkConfig) (result *v1.NetworkConfig, err error) {
	result = &v1.NetworkConfig{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("networkconfigs").
		Name(networkConfig.Name).
		SubResource("status").
		Body(networkConfig).
		Do().
		Into(result)
	return
}

// Delete takes name of the networkConfig and deletes it. Returns an error if one occurs.
func (c *networkConfigs) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("networkconfigs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *networkConfigs) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("networkconfigs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched networkConfig.
func (c *networkConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.NetworkConfig, err error) {
	result = &v1.NetworkConfig{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("networkconfigs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
