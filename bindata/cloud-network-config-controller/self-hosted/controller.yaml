apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-network-config-controller
  namespace: openshift-cloud-network-config-controller
  annotations:
    kubernetes.io/description: |
      This deployment launches the cloud network config controller which manages cloud-level network configurations
    release.openshift.io/version: "{{.ReleaseVersion}}"
    networkoperator.openshift.io/non-critical: ""
spec:
  selector:
    matchLabels:
      app: cloud-network-config-controller
  strategy:
    type: Recreate
  template:
    metadata:
      name: cloud-network-config-controller
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: cloud-network-config-controller
        component: network
        type: infra
        openshift.io/component: network
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: cloud-network-config-controller
      priorityClassName: system-cluster-critical
      containers:
      - name: controller
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        image: {{.CloudNetworkConfigControllerImage}}
        imagePullPolicy: IfNotPresent
        command: ["/usr/bin/cloud-network-config-controller"]
        args: [ "-platform-type", "{{.PlatformType}}",
                "-platform-region={{.PlatformRegion}}",
                "-platform-api-url={{.PlatformAPIURL}}",
                "-platform-aws-ca-override={{.PlatformAWSCAPath}}",
                "-platform-azure-environment={{.PlatformAzureEnvironment}}",
                "-secret-name", "cloud-credentials"]
        env:
        - name: CONTROLLER_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONTROLLER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_SERVICE_PORT
          value: "{{.KubernetesServicePort}}"
        - name: KUBERNETES_SERVICE_HOST
          value: "{{.KubernetesServiceHost}}"
        - name: RELEASE_VERSION
          value: "{{.ReleaseVersion}}"
{{ if .HTTP_PROXY }}
        - name: "HTTP_PROXY"
          value: "{{ .HTTP_PROXY}}"
{{ end }}
{{ if .HTTPS_PROXY }}
        - name: "HTTPS_PROXY"
          value: "{{ .HTTPS_PROXY}}"
{{ end }}
{{ if .NO_PROXY }}
        - name: "NO_PROXY"
          value: "{{ .NO_PROXY}}"
{{ end }}
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        volumeMounts:
        - name: cloud-provider-secret
          mountPath: "/etc/secret/cloudprovider"
          readOnly: true
        - name: kube-cloud-config
          mountPath: "/kube-cloud-config"
          readOnly: true
        - name: trusted-ca
          mountPath: /etc/pki/ca-trust/extracted/pem
          readOnly: true
        - name: bound-sa-token
          mountPath: /var/run/secrets/openshift/serviceaccount
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
{{- if not .ExternalControlPlane }}
      nodeSelector:
        node-role.kubernetes.io/master: ""
{{- end }}
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      volumes:
      - name: cloud-provider-secret
        secret:
          secretName: cloud-credentials
      - name: kube-cloud-config
        configMap:
          name: kube-cloud-config
      - name: trusted-ca
        configMap:
          name: trusted-ca
          items:
          - key: ca-bundle.crt
            path: tls-ca-bundle.pem
      # This service account token can be used to provide identity outside the cluster.
      # For example, this token can be used with AssumeRoleWithWebIdentity to authenticate with AWS using IAM OIDC provider and STS.
      - name: bound-sa-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              audience: openshift
