kind: ConfigMap
apiVersion: v1
metadata:
  namespace: openshift-kube-proxy
  name: proxy-config
data:
  kube-proxy-config.yaml: |-
{{.KubeProxyConfig | indent 4}}

---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: openshift-kube-proxy
  namespace: openshift-kube-proxy
  annotations:
    kubernetes.io/description: |
      This daemonset is the kubernetes service proxy (kube-proxy).
    release.openshift.io/version: "{{.ReleaseVersion}}"
spec:
  selector:
    matchLabels:
      app: kube-proxy
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kube-proxy
        component: network
        type: infra
        openshift.io/component: network
    spec:
      serviceAccountName: openshift-kube-proxy
      hostNetwork: true
      priorityClassName: system-node-critical
      containers:
      - name: kube-proxy
        image: {{.KubeProxyImage}}
        command:
        - /bin/bash
        - -c
        - exec /usr/bin/kube-proxy --config=/config/kube-proxy-config.yaml --hostname-override "${K8S_NODE_NAME}"
        securityContext:
          privileged: true
        env:
        # Tell kube-proxy to talk to the apiserver directly.
        - name: KUBERNETES_SERVICE_PORT
          value: "{{.KUBERNETES_SERVICE_PORT}}"
        - name: KUBERNETES_SERVICE_HOST
          value: "{{.KUBERNETES_SERVICE_HOST}}"
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        # Because we don't actually run iptables locally, but chroot in to the host
        - mountPath: /host
          name: host-slash
          readOnly: true
          mountPropagation: HostToContainer
        - mountPath: /config
          name: config
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
        ports:
        - name: healthz
          containerPort: {{.HealthzPort}}
        - name: metrics
          containerPort: {{.MetricsPort}}
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
        readinessProbe:
          httpGet:
            path: /healthz
            port: healthz
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
      restartPolicy: Always
      tolerations:
      - operator: Exists
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: host-slash
        hostPath:
          path: /
      - name: config
        configMap:
          name: proxy-config
