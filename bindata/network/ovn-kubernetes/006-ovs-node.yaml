kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: ovs-node
  namespace: openshift-ovn-kubernetes
  annotations:
    kubernetes.io/description: |
      This daemonset launches  Open vSwitch per-node networking components.
    release.openshift.io/version: "{{.ReleaseVersion}}"
spec:
  selector:
    matchLabels:
      app: ovs-node
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ovs-node
        component: network
        type: infra
        openshift.io/component: network
        kubernetes.io/os: "linux"
    spec:
      serviceAccountName: ovn-kubernetes-node
      hostNetwork: true
      hostPID: true
      priorityClassName: "system-node-critical"
      # volumes in all containers:
      # (container) -> (host)
      # /etc/openvswitch -> /var/lib/openvswitch/etc - ovsdb system id
      # /var/lib/openvswitch -> /var/lib/openvswitch/data - ovsdb data
      # /run/openvswitch -> tmpfs - ovsdb sockets
      # /env -> configmap env-overrides - debug overrides
      containers:
      # ovsdb and ovs-vswitchd
      - name: ovs-daemons
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
          set -euo pipefail
          if [[ -f "/env/${K8S_NODE}" ]]; then
            set -o allexport
            source "/env/${K8S_NODE}"
            set +o allexport
          fi
          export SYSTEMD_IGNORE_CHROOT=yes
          # Check to see if ovs is provided by the node:
          if systemctl status ovsdb-server; then
            echo "openvswitch is running in systemd"
            # In some very strange corner cases, the owner for /run/openvswitch
            # can be wrong, so we need to clean up and restart.
            ovs_uid=$(chroot /host id -u openvswitch)
            ovs_gid=$(chroot /host id -g openvswitch)
            chown -R "${ovs_uid}:${ovs_gid}" /run/openvswitch
            if [[ ! -S /run/openvswitch/db.sock ]]; then
              systemctl restart ovsdb-server
            fi
            # Don't need to worry about restoring flows; this can only change if we've rebooted
            exec tail -F /host/var/log/openvswitch/ovs-vswitchd.log /host/var/log/openvswitch/ovsdb-server.log
          else
            echo "$(date -Iseconds) - starting ovs-daemons"
            chown -R openvswitch:openvswitch /run/openvswitch
            chown -R openvswitch:openvswitch /etc/openvswitch
            function quit {
                # Don't allow ovs-vswitchd to clear datapath flows on exit
                kill -9 $(cat /var/run/openvswitch/ovs-vswitchd.pid 2>/dev/null) 2>/dev/null || true
                kill $(cat /var/run/openvswitch/ovsdb-server.pid 2>/dev/null) 2>/dev/null || true
                exit 0
            }
            trap quit SIGTERM
            /usr/share/openvswitch/scripts/ovs-ctl start --ovs-user=openvswitch:openvswitch --system-id=random
            ovs-appctl vlog/set "file:${OVS_LOG_LEVEL}"
            /usr/share/openvswitch/scripts/ovs-ctl --protocol=udp --dport=6081 enable-protocol
            echo "$(date -Iseconds) - ovs-daemons running"

            tail -F --pid=$(cat /var/run/openvswitch/ovs-vswitchd.pid) /var/log/openvswitch/ovs-vswitchd.log &
            tail -F --pid=$(cat /var/run/openvswitch/ovsdb-server.pid) /var/log/openvswitch/ovsdb-server.log &
            wait
          fi
        env:
        - name: OVS_LOG_LEVEL
          value: info
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /lib/modules
          name: host-modules
          readOnly: true
        - mountPath: /sys
          name: host-sys
          readOnly: true
        - mountPath: /run
          name: host-run
        - mountPath: /etc/openvswitch
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch
          name: var-lib-openvswitch
        - mountPath: /env
          name: env-overrides
        - mountPath: /host
          name: host-slash
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        terminationMessagePolicy: FallbackToLogsOnError
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              /usr/bin/ovs-vsctl -t 5 show > /dev/null
          initialDelaySeconds: 15
          periodSeconds: 5
        terminationGracePeriodSeconds: 10
      nodeSelector:
        beta.kubernetes.io/os: "linux"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: network.operator.openshift.io/external-openvswitch
                operator: DoesNotExist        
      volumes:
      # used for iptables wrapper scripts
      - name: host-modules
        hostPath:
          path: /lib/modules
      - name: var-lib-openvswitch
        hostPath:
          path: /var/lib/openvswitch/data
          type: DirectoryOrCreate
      - name: etc-openvswitch
        hostPath:
          path: /var/lib/openvswitch/etc
          type: DirectoryOrCreate
      - name: host-run
        hostPath:
          path: /run
      - name: host-sys
        hostPath:
          path: /sys
      - name: host-slash
        hostPath:
          path: /
      - name: env-overrides
        configMap:
          name: env-overrides
          optional: true
      tolerations:
      - operator: "Exists"
