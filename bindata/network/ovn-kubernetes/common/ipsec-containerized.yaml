{{if .OVNIPsecDaemonsetEnable}}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: ovn-ipsec-containerized
  namespace: openshift-ovn-kubernetes
  annotations:
    kubernetes.io/description: |
      This DaemonSet launches the ovn ipsec networking components for all nodes.
    release.openshift.io/version: "{{.ReleaseVersion}}"
spec:
  selector:
    matchLabels:
      app: ovn-ipsec
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 10%
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
        # prevent blocks when node critical pods get evicted prior to workloads
        cluster-autoscaler.kubernetes.io/enable-ds-eviction: "false"
      labels:
        app: ovn-ipsec
        component: network
        type: infra
        openshift.io/component: network
        kubernetes.io/os: "linux"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: network.operator.openshift.io/dpu-host
                operator: DoesNotExist
      serviceAccountName: ovn-kubernetes-node
      hostNetwork: true
      dnsPolicy: Default
      priorityClassName: "system-node-critical"
      initContainers:
      - name: ovn-keys
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
          set -e
          . /ovnkube-lib/ovnkube-lib.sh || exit 1
          configure-ipsec-certkey-ovs
        env:
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
        volumeMounts:
{{ if .NETWORK_NODE_IDENTITY_ENABLE }}
        - mountPath: /etc/ovn/
          name: etc-ovn
{{ end }}
        - mountPath: /var/run/openvswitch
          name: host-var-run-ovs
        - mountPath: /signer-ca
          name: signer-ca
        - mountPath: /etc/openvswitch
          name: etc-openvswitch
        - mountPath: /ovnkube-lib
          name: ovnkube-script-lib
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      # ovs-monitor-ipsec and libreswan daemons
      - name: ovn-ipsec
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
          set -exuo pipefail

          function cleanup()
          {
            # In order to maintain traffic flows during container restart, we
            # need to ensure that xfrm state and policies are not flushed.

            # Don't allow ovs monitor to cleanup persistent state
            kill "$(cat /var/run/openvswitch/ovs-monitor-ipsec.pid 2>/dev/null)" 2>/dev/null || true
            # Don't allow pluto to clear xfrm state and policies on exit
            kill -9 "$(cat /var/run/pluto/pluto.pid 2>/dev/null)" 2>/dev/null || true

            /usr/sbin/ipsec --stopnflog
            exit 0
          }
          trap cleanup SIGTERM

          # Don't start IPsec until ovnkube-node has finished setting up the node
          counter=0
          until [ -f /etc/cni/net.d/10-ovn-kubernetes.conf ]
          do
            counter=$((counter+1))
            sleep 1
            if [ $counter -gt 300 ];
            then
                    echo "ovnkube-node pod has not started after $counter seconds"
                    exit 1
            fi
          done
          echo "ovnkube-node has configured node."

          # After a restart of this container (or on initial startup), we flush xfrm state and policy
          # before we start pluto and ovs-monitor-ipsec in order to start in a known good state. This
          # will result in a small interruption in traffic until pluto and ovs-monitor-ipsec start again.
          ip x s flush
          ip x p flush

          # Workaround for https://github.com/libreswan/libreswan/issues/373
          ulimit -n 1024

          /usr/libexec/ipsec/addconn --config /etc/ipsec.conf --checkconfig
          # Check kernel modules
          /usr/libexec/ipsec/_stackmanager start
          # Check nss database status
          /usr/sbin/ipsec --checknss
          # Start the pluto IKE daemon
          /usr/libexec/ipsec/pluto --leak-detective --config /etc/ipsec.conf --logfile /var/log/openvswitch/libreswan.log

          # Start ovs-monitor-ipsec which will monitor for changes in the ovs
          # tunnelling configuration (for example addition of a node) and configures
          # libreswan appropriately.
          # We are running this in the foreground so that the container will be restarted when ovs-monitor-ipsec fails.
          /usr/libexec/platform-python /usr/share/openvswitch/scripts/ovs-monitor-ipsec \
            --pidfile=/var/run/openvswitch/ovs-monitor-ipsec.pid --ike-daemon=libreswan --no-restart-ike-daemon \
            --ipsec-d /var/lib/ipsec/nss \
            --log-file --monitor unix:/var/run/openvswitch/db.sock
        env:
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
        volumeMounts:
        # To check that network setup is complete
        - mountPath: /etc/cni/net.d
          name: host-cni-netd
        - mountPath: /var/run/openvswitch
          name: host-var-run-ovs
        - mountPath: /var/log/openvswitch/
          name: host-var-log-ovs
        - mountPath: /etc/openvswitch
          name: etc-openvswitch
        resources:
          requests:
            cpu: 10m
            memory: 100Mi
        terminationMessagePolicy: FallbackToLogsOnError
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              if [[ $(ipsec whack --trafficstatus | wc -l) -eq 0 ]]; then
                echo "no ipsec traffic configured"
                exit 10
              fi
          initialDelaySeconds: 15
          periodSeconds: 60
      nodeSelector:
        kubernetes.io/os: "linux"
      terminationGracePeriodSeconds: 10
      volumes:
{{ if .NETWORK_NODE_IDENTITY_ENABLE }}
      - name: etc-ovn
        hostPath:
          path: /var/lib/ovn-ic/etc
{{ end }}
      - name: host-var-log-ovs
        hostPath:
          path: /var/log/openvswitch
          type: DirectoryOrCreate
      - name: host-var-run-ovs
        hostPath:
          path: /var/run/openvswitch
          type: DirectoryOrCreate
      - name: signer-ca
        configMap:
          name: signer-ca
      - name: etc-openvswitch
        hostPath:
          path: /var/lib/openvswitch/etc
          type: DirectoryOrCreate
      - name: host-cni-netd
        hostPath:
          path: "{{.CNIConfDir}}"
      - name: ovnkube-script-lib
        configMap:
          name: ovnkube-script-lib
          defaultMode: 0744
      tolerations:
      - operator: "Exists"
{{end}}
