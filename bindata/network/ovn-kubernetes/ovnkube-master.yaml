# The ovnkube control-plane components

# The pod disruption budget ensures that we keep a raft quorum
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: ovn-raft-quorum-guard
  namespace: openshift-ovn-kubernetes
spec:
  minAvailable: {{.OVN_MIN_AVAILABLE}}
  selector:
    matchLabels:
      app: ovnkube-master

---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: ovnkube-master
  namespace: openshift-ovn-kubernetes
  annotations:
    kubernetes.io/description: |
      This daemonset launches the ovn-kubernetes controller (master) networking components.
    release.openshift.io/version: "{{.ReleaseVersion}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ovnkube-master
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # by default, Deployments spin up the new pod before terminating the old one
      # but we don't want that - because ovsdb holds the lock.
      maxSurge: 0
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: ovnkube-master
        component: network
        type: infra
        openshift.io/component: network
        kubernetes.io/os: "linux"
    spec:
      serviceAccountName: ovn-kubernetes-controller
      hostNetwork: true
      priorityClassName: "system-cluster-critical"
      # volumes in all containers:
      # (container) -> (host)
      # /etc/openvswitch -> /var/lib/ovn/etc - ovsdb data
      # /var/lib/openvswitch -> /var/lib/ovn/data - ovsdb pki state
      # /run/openvswitch -> tmpfs - sockets
      # /env -> configmap env-overrides - debug overrides
      containers:
      # ovn-northd: convert network objects in nbdb to flows in sbdb
      - name: northd
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          set -xe
          if [[ -f /env/_master ]]; then
            set -o allexport
            source /env/_master
            set +o allexport
          fi

          echo "$(date -Iseconds) - starting ovn-northd"
          exec ovn-northd \
            --no-chdir "-vconsole:${OVN_LOG_LEVEL}" -vfile:off \
            --ovnnb-db "{{.OVN_NB_DB_LIST}}" \
            --ovnsb-db "{{.OVN_SB_DB_LIST}}" \
            --pidfile /var/run/ovn/ovn-northd.pid \
            -p /ovn-cert/tls.key \
            -c /ovn-cert/tls.crt \
            -C /ovn-ca/ca-bundle.crt 
        env:
        - name: OVN_LOG_LEVEL
          value: info 
        volumeMounts:
        - mountPath: /etc/openvswitch/
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch/
          name: var-lib-openvswitch
        - mountPath: /run/openvswitch/
          name: run-openvswitch
        - mountPath: /run/ovn/
          name: run-ovn
        - mountPath: /env
          name: env-overrides
        - mountPath: /ovn-cert # not needed, but useful when exec'ing in to pod.
          name: ovn-cert
        - mountPath: /ovn-ca
          name: ovn-ca
        resources:
          requests:
            cpu: 10m
            memory: 300Mi
        terminationMessagePolicy: FallbackToLogsOnError

      # nbdb: the northbound, or logical network object DB. In raft mode 
      - name: nbdb
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          set -xe
          if [[ -f /env/_master ]]; then
            set -o allexport
            source /env/_master
            set +o allexport
          fi

          bracketify() { case "$1" in *:*) echo "[$1]" ;; *) echo "$1" ;; esac }

          check_db_health() {
            db="${1}"
            if [[ ! -f "${db}" ]]; then
                  echo "${db} does not exist, skipping health check"
                  return
            fi
            echo "Checking ${db} health"
            serverid=$(ovsdb-tool show-log "${db}" | grep -m 1 -oP '(?<=server_id: )[[:xdigit:]]+')
            # prev_servers is a list.  We are searching for " $server_id(" in the list
            # prev_servers: 33b4("ssl:10.19.138.37:9643"), 720d("ssl:10.19.138.33:9643"), 7e4f("ssl:10.19.138.32:9643")
            match=$(ovsdb-tool show-log "${db}" | grep "prev_servers:.* ${serverid}(" || true)
            if [[ -z ${match} ]]; then
                echo "Current server_id $serverid not found in ${db}, cleaning up"
                rm -- "${db}"
            else
                  echo "${db} is healthy"
            fi
          }

          check_db_health "/etc/ovn/ovnnb_db.db"

          MASTER_IP="{{.OVN_MASTER_IP}}"
          echo "$(date -Iseconds) - starting nbdb  MASTER_IP=${MASTER_IP}"
          if [[ "${K8S_NODE_IP}" == "${MASTER_IP}" ]]; then
            exec /usr/share/ovn/scripts/ovn-ctl \
            --db-nb-cluster-local-port={{.OVN_NB_RAFT_PORT}} \
            --db-nb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \
            --no-monitor \
            --db-nb-cluster-local-proto=ssl \
            --ovn-nb-db-ssl-key=/ovn-cert/tls.key \
            --ovn-nb-db-ssl-cert=/ovn-cert/tls.crt \
            --ovn-nb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt \
            --ovn-nb-log="-vconsole:${OVN_LOG_LEVEL} -vfile:off" \
            run_nb_ovsdb
          else
            exec /usr/share/ovn/scripts/ovn-ctl \
            --db-nb-cluster-local-port={{.OVN_NB_RAFT_PORT}} \
            --db-nb-cluster-remote-port={{.OVN_NB_RAFT_PORT}} \
            --db-nb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \
            --db-nb-cluster-remote-addr=$(bracketify ${MASTER_IP}) \
            --no-monitor \
            --db-nb-cluster-local-proto=ssl \
            --db-nb-cluster-remote-proto=ssl \
            --ovn-nb-db-ssl-key=/ovn-cert/tls.key \
            --ovn-nb-db-ssl-cert=/ovn-cert/tls.crt \
            --ovn-nb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt \
            --ovn-nb-log="-vconsole:${OVN_LOG_LEVEL} -vfile:off" \
            run_nb_ovsdb
          fi
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                set -x
                MASTER_IP="{{.OVN_MASTER_IP}}"
                if [[ "${K8S_NODE_IP}" == "${MASTER_IP}" ]]; then
                  echo "$(date -Iseconds) - nbdb - postStart - waiting for master to be selected"

                  # set the connection and disable inactivity probe
                  retries=0
                  while ! ovn-nbctl --no-leader-only -t 5 set-connection pssl:{{.OVN_NB_PORT}}{{.LISTEN_DUAL_STACK}} -- set connection . inactivity_probe=60000; do
                    (( retries += 1 ))
                  if [[ "${retries}" -gt 40 ]]; then
                    echo "$(date -Iseconds) - ERROR RESTARTING - nbdb - too many failed ovn-nbctl attempts, giving up"
                      exit 1
                  fi
                  sleep 2
                  done
                fi

                election_timer="${OVN_NB_RAFT_ELECTION_TIMER}"
                echo "Setting nb-db raft election timer to ${election_timer} ms"
                retries=0
                while current_election_timer=$(ovs-appctl -t /var/run/ovn/ovnnb_db.ctl cluster/status OVN_Northbound 2>/dev/null \
                  | grep -oP '(?<=Election timer:\s)[[:digit:]]+'); do
                  if [[ -z "${current_election_timer}" ]]; then
                    (( retries += 1 ))
                    if [[ "${retries}" -gt 10 ]]; then
                      echo "Failed to get current nb-db raft election timer value after multiple attempts. Exiting..."
                      exit 1
                    fi
                    sleep 2
                  else
                    break
                  fi
                done

                if [[ ${election_timer} -ne ${current_election_timer} ]]; then
                  retries=0
                  while is_candidate=$(ovs-appctl -t /var/run/ovn/ovnnb_db.ctl cluster/status OVN_Northbound 2>/dev/null \
                    | grep "Role: candidate" ); do
                    if [[ ! -z "${is_candidate}" ]]; then
                      (( retries += 1 ))
                      if [[ "${retries}" -gt 10 ]]; then
                        echo "Cluster node (nb-db raft) is in candidate role for prolonged time. Continuing..."
                      fi
                      sleep 2
                    else
                      break
                    fi
                  done

                  is_leader=$(ovs-appctl -t /var/run/ovn/ovnnb_db.ctl cluster/status OVN_Northbound 2>/dev/null \
                    | grep "Role: leader")
                  if [[ ! -z "${is_leader}" ]]; then
                    while [[ ${current_election_timer} != ${election_timer} ]]; do
                      max_election_timer=$((${current_election_timer} * 2))
                      if [[ ${election_timer} -le ${max_election_timer} ]]; then
                        if ! ovs-appctl -t /var/run/ovn/ovnnb_db.ctl cluster/change-election-timer OVN_Northbound ${election_timer}; then
                          echo "Failed to set nb-db raft election timer ${election_timer}. Exiting..."
                          exit 2
                        fi
                        current_election_timer=${election_timer}
                      else
                        if ! ovs-appctl -t /var/run/ovn/ovnnb_db.ctl cluster/change-election-timer OVN_Northbound ${max_election_timer}; then
                          echo "Failed to set nb-db raft election timer ${max_election_timer}. Exiting..."
                          exit 2
                        fi
                      current_election_timer=${max_election_timer}
                      fi
                    done
                  fi
                fi

        readinessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 5
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -xe
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnnb_db.ctl --timeout=3 cluster/status OVN_Northbound  2>/dev/null | grep ${K8S_NODE_IP} | grep -v Address -q
        env:
        - name: OVN_LOG_LEVEL
          value: info 
        - name: OVN_NB_RAFT_ELECTION_TIMER
          value: "{{.OVN_NB_RAFT_ELECTION_TIMER}}"
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        volumeMounts:
        - mountPath: /etc/openvswitch/
          name: etc-openvswitch
        - mountPath: /etc/ovn/
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch/
          name: var-lib-openvswitch
        - mountPath: /run/openvswitch/
          name: run-openvswitch
        - mountPath: /run/ovn/
          name: run-ovn
        - mountPath: /env
          name: env-overrides
        - mountPath: /ovn-cert
          name: ovn-cert
        - mountPath: /ovn-ca
          name: ovn-ca
        resources:
          requests:
            cpu: 10m
            memory: 300Mi
        ports:
        - name: nb-db-port
          containerPort: {{.OVN_NB_PORT}}
        - name: nb-db-raft-port
          containerPort: {{.OVN_NB_RAFT_PORT}}
        terminationMessagePolicy: FallbackToLogsOnError
      
      # sbdb: The southbound, or flow DB. In raft mode 
      - name: sbdb
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          set -x
          if [[ -f /env/_master ]]; then
            set -o allexport
            source /env/_master
            set +o allexport
          fi

          bracketify() { case "$1" in *:*) echo "[$1]" ;; *) echo "$1" ;; esac }

          check_db_health() {
            db="${1}"
            if [[ ! -f "${db}" ]]; then
                  echo "${db} does not exist, skipping health check"
                  return
            fi
            echo "Checking ${db} health"
            serverid=$(ovsdb-tool show-log "${db}" | grep -m 1 -oP '(?<=server_id: )[[:xdigit:]]+')
            # prev_servers is a list.  We are searching for " $server_id(" in the list
            # prev_servers: 33b4("ssl:10.19.138.37:9643"), 720d("ssl:10.19.138.33:9643"), 7e4f("ssl:10.19.138.32:9643")
            match=$(ovsdb-tool show-log "${db}" | grep "prev_servers:.* ${serverid}(" || true)
            if [[ -z ${match} ]]; then
                echo "Current server_id $serverid not found in ${db}, cleaning up"
                rm -- "${db}"
            else
                  echo "${db} is healthy"
            fi
          }

          check_db_health "/etc/ovn/ovnsb_db.db"

          MASTER_IP="{{.OVN_MASTER_IP}}"
          echo "$(date -Iseconds) - starting sbdb  MASTER_IP=${MASTER_IP}"
          if [[ "${K8S_NODE_IP}" == "${MASTER_IP}" ]]; then
            exec /usr/share/ovn/scripts/ovn-ctl \
            --db-sb-cluster-local-port={{.OVN_SB_RAFT_PORT}} \
            --db-sb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \
            --no-monitor \
            --db-sb-cluster-local-proto=ssl \
            --ovn-sb-db-ssl-key=/ovn-cert/tls.key \
            --ovn-sb-db-ssl-cert=/ovn-cert/tls.crt \
            --ovn-sb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt \
            --ovn-sb-log="-vconsole:${OVN_LOG_LEVEL} -vfile:off" \
            run_sb_ovsdb
          else
            echo "$(date -Iseconds) - joining cluster at ${MASTER_IP}"
            exec /usr/share/ovn/scripts/ovn-ctl \
            --db-sb-cluster-local-port={{.OVN_SB_RAFT_PORT}} \
            --db-sb-cluster-remote-port={{.OVN_SB_RAFT_PORT}} \
            --db-sb-cluster-local-addr=$(bracketify ${K8S_NODE_IP}) \
            --db-sb-cluster-remote-addr=$(bracketify ${MASTER_IP}) \
            --no-monitor \
            --db-sb-cluster-local-proto=ssl \
            --db-sb-cluster-remote-proto=ssl \
            --ovn-sb-db-ssl-key=/ovn-cert/tls.key \
            --ovn-sb-db-ssl-cert=/ovn-cert/tls.crt \
            --ovn-sb-db-ssl-ca-cert=/ovn-ca/ca-bundle.crt \
            --ovn-sb-log="-vconsole:${OVN_LOG_LEVEL} -vfile:off" \
            run_sb_ovsdb
          fi
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                set -x
                MASTER_IP="{{.OVN_MASTER_IP}}"
                if [[ "${K8S_NODE_IP}" == "${MASTER_IP}" ]]; then
                  echo "$(date -Iseconds) - sdb - postStart - waiting for master to be selected"

                  # set the connection and disable inactivity probe
                  retries=0
                  while ! ovn-sbctl --no-leader-only -t 5 set-connection pssl:{{.OVN_SB_PORT}}{{.LISTEN_DUAL_STACK}} -- set connection . inactivity_probe=60000; do
                    (( retries += 1 ))
                  if [[ "${retries}" -gt 40 ]]; then
                    echo "$(date -Iseconds) - ERROR RESTARTING - sbdb - too many failed ovn-sbctl attempts, giving up"
                      exit 1
                  fi
                  sleep 2
                  done
                fi

                election_timer="${OVN_SB_RAFT_ELECTION_TIMER}"
                echo "Setting sb-db raft election timer to ${election_timer} ms"
                retries=0
                while current_election_timer=$(ovs-appctl -t /var/run/ovn/ovnsb_db.ctl cluster/status OVN_Southbound 2>/dev/null \
                  | grep -oP '(?<=Election timer:\s)[[:digit:]]+'); do
                  if [[ -z "${current_election_timer}" ]]; then
                    (( retries += 1 ))
                    if [[ "${retries}" -gt 10 ]]; then
                      echo "Failed to get current sb-db raft election timer value after multiple attempts. Exiting..."
                      exit 1
                    fi
                    sleep 2
                  else
                    break
                  fi
                done

                if [[ ${election_timer} -ne ${current_election_timer} ]]; then
                  retries=0
                  while is_candidate=$(ovs-appctl -t /var/run/ovn/ovnsb_db.ctl cluster/status OVN_Southbound 2>/dev/null \
                    | grep "Role: candidate" ); do
                    if [[ ! -z "${is_candidate}" ]]; then
                      (( retries += 1 ))
                      if [[ "${retries}" -gt 10 ]]; then
                        echo "Cluster node (sb-db raft) is in candidate role for prolonged time. Continuing..."
                      fi
                      sleep 2
                    else
                      break
                    fi
                  done

                  is_leader=$(ovs-appctl -t /var/run/ovn/ovnsb_db.ctl cluster/status OVN_Southbound 2>/dev/null \
                    | grep "Role: leader")
                  if [[ ! -z "${is_leader}" ]]; then
                    while [[ ${current_election_timer} != ${election_timer} ]]; do
                      max_election_timer=$((${current_election_timer} * 2))
                      if [[ ${election_timer} -le ${max_election_timer} ]]; then
                        if ! ovs-appctl -t /var/run/ovn/ovnsb_db.ctl cluster/change-election-timer OVN_Southbound ${election_timer}; then
                          echo "Failed to set sb-db raft election timer ${election_timer}. Exiting..."
                          exit 2
                        fi
                        current_election_timer=${election_timer}
                      else
                        if ! ovs-appctl -t /var/run/ovn/ovnsb_db.ctl cluster/change-election-timer OVN_Southbound ${max_election_timer}; then
                          echo "Failed to set sb-db raft election timer ${max_election_timer}. Exiting..."
                          exit 2
                        fi
                      current_election_timer=${max_election_timer}
                      fi
                    done
                  fi
                fi

        readinessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 5
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -xe
              /usr/bin/ovn-appctl -t /var/run/ovn/ovnsb_db.ctl --timeout=3 cluster/status OVN_Southbound  2>/dev/null | grep ${K8S_NODE_IP} | grep -v Address -q
        env:
        - name: OVN_LOG_LEVEL
          value: info 
        - name: OVN_SB_RAFT_ELECTION_TIMER
          value: "{{.OVN_SB_RAFT_ELECTION_TIMER}}"
        - name: K8S_NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        volumeMounts:
        - mountPath: /etc/openvswitch/
          name: etc-openvswitch
        - mountPath: /etc/ovn/
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch/
          name: var-lib-openvswitch
        - mountPath: /run/openvswitch/
          name: run-openvswitch
        - mountPath: /run/ovn/
          name: run-ovn
        - mountPath: /env
          name: env-overrides
        - mountPath: /ovn-cert
          name: ovn-cert
        - mountPath: /ovn-ca
          name: ovn-ca
        ports:
        - name: sb-db-port
          containerPort: {{.OVN_SB_PORT}}
        - name: sb-db-raft-port
          containerPort: {{.OVN_SB_RAFT_PORT}}
        terminationMessagePolicy: FallbackToLogsOnError

      # ovnkube master: convert kubernetes objects in to nbdb logical network components
      - name: ovnkube-master
        image: "{{.OvnImage}}"
        command:
        - /bin/bash
        - -c
        - |
          set -xe
          if [[ -f "/env/_master" ]]; then
            set -o allexport
            source "/env/_master"
            set +o allexport
          fi

          hybrid_overlay_flags=
          if [[ -n "{{.OVNHybridOverlayEnable }}" ]]; then
            hybrid_overlay_flags="--enable-hybrid-overlay --no-hostsubnet-nodes=kubernetes.io/os=windows"
            if [[ -n "{{.OVNHybridOverlayNetCIDR}}" ]]; then
              hybrid_overlay_flags="${hybrid_overlay_flags} --hybrid-overlay-cluster-subnets={{.OVNHybridOverlayNetCIDR}}"
            fi
          fi

          # start nbctl daemon for caching
          echo "I$(date "+%m%d %H:%M:%S.%N") - ovnkube-master - start nbctl daemon for caching"
          export OVN_NB_DAEMON=$(ovn-nbctl --pidfile=/var/run/ovn/ovn-nbctl.pid \
            --detach \
            -p /ovn-cert/tls.key -c /ovn-cert/tls.crt -C /ovn-ca/ca-bundle.crt \
            --db "{{.OVN_NB_DB_LIST}}")

           # REMOVEME once OVN path for control socket is fixed (right now uses /var/run/openvswitch)
          ln -sf $OVN_NB_DAEMON /var/run/ovn/ || true

          echo "I$(date "+%m%d %H:%M:%S.%N") - ovnkube-master - start ovnkube --init-master ${K8S_NODE}"
          exec /usr/bin/ovnkube \
            --init-master "${K8S_NODE}" \
            --config-file=/run/ovnkube-config/ovnkube.conf \
            --ovn-empty-lb-events \
            --loglevel "${OVN_KUBE_LOG_LEVEL}" \
            ${hybrid_overlay_flags} \
            --metrics-bind-address "0.0.0.0:9102" \
            --sb-address "{{.OVN_SB_DB_LIST}}" \
            --sb-client-privkey /ovn-cert/tls.key \
            --sb-client-cert /ovn-cert/tls.crt \
            --sb-client-cacert /ovn-ca/ca-bundle.crt \
            --nb-address "{{.OVN_NB_DB_LIST}}" \
            --nb-client-privkey /ovn-cert/tls.key \
            --nb-client-cert /ovn-cert/tls.crt \
            --nb-client-cacert /ovn-ca/ca-bundle.crt \
            --nbctl-daemon-mode \
            --enable-multicast
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", "kill $(cat /var/run/ovn/ovn-nbctl.pid) && unset OVN_NB_DAEMON"]
        volumeMounts:
        - mountPath: /etc/openvswitch/
          name: etc-openvswitch
        - mountPath: /etc/ovn/
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch/
          name: var-lib-openvswitch
        - mountPath: /run/openvswitch/
          name: run-openvswitch
        - mountPath: /run/ovn/
          name: run-ovn
        - mountPath: /run/ovnkube-config/
          name: ovnkube-config
        - mountPath: /env
          name: env-overrides
        - mountPath: /ovn-cert
          name: ovn-cert
        - mountPath: /ovn-ca
          name: ovn-ca
        resources:
          requests:
            cpu: 10m
            memory: 300Mi
        env:
        - name: OVN_KUBE_LOG_LEVEL
          value: "4"
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - name: metrics-port
          containerPort: 9102
        terminationMessagePolicy: FallbackToLogsOnError

      nodeSelector:
        node-role.kubernetes.io/master: ""
        beta.kubernetes.io/os: "linux"
      volumes:
      - name: etc-openvswitch
        hostPath:
          path: /var/lib/ovn/etc
      - name: var-lib-openvswitch
        hostPath:
          path: /var/lib/ovn/data
      - name: run-openvswitch
        emptyDir: {}
      - name: run-ovn
        hostPath:
          path: /var/run/ovn
      - name: ovnkube-config
        configMap:
          name: ovnkube-config
      - name: env-overrides
        configMap:
          name: env-overrides
          optional: true
      - name: ovn-ca
        configMap:
          name: ovn-ca
      - name: ovn-cert
        secret:
          secretName: ovn-cert
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
      - key: "node.kubernetes.io/network-unavailable"
        operator: "Exists"
