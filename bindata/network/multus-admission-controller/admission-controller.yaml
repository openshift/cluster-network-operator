---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: multus-admission-controller
  namespace: {{.AdmissionControllerNamespace}}
  labels:
    app: multus-admission-controller
{{- if .HyperShiftEnabled}}
    # used by PodAffinity to prefer co-locating pods that belong to the same hosted cluster.
    hypershift.openshift.io/hosted-control-plane: {{.AdmissionControllerNamespace}}
{{- end }}
  annotations:
    kubernetes.io/description: |
      This deployment launches the Multus admisson controller component.
    release.openshift.io/version: "{{.ReleaseVersion}}"
    networkoperator.openshift.io/non-critical: ""
{{- if .HyperShiftEnabled}}
    network.operator.openshift.io/cluster-name:  {{.ManagementClusterName}}
{{- end }}
spec:
  replicas: {{.Replicas}}
  selector:
    matchLabels:
      app: multus-admission-controller
      namespace: {{.AdmissionControllerNamespace}}
{{- if and .HyperShiftEnabled (gt .Replicas 1)}}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
{{- end }}
  template:
    metadata:
      annotations:
{{- if .HyperShiftEnabled}}
        hypershift.openshift.io/release-image: {{.ReleaseImage}}
{{- end }}      
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: multus-admission-controller
        namespace: {{.AdmissionControllerNamespace}}
        component: network
        type: infra
        openshift.io/component: network
    spec:
{{- if .HyperShiftEnabled}}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              preference:
                matchExpressions:
                  - key: hypershift.openshift.io/control-plane
                    operator: In
                    values:
                      - "true"
            - weight: 100
              preference:
                matchExpressions:
                  - key: hypershift.openshift.io/cluster
                    operator: In
                    values:
                      - {{.AdmissionControllerNamespace}}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    hypershift.openshift.io/hosted-control-plane: {{.AdmissionControllerNamespace}}
                topologyKey: kubernetes.io/hostname
      initContainers:
        - name: hosted-cluster-kubecfg-setup
          image: "{{.CLIImage}}"
          command:
            - /bin/bash
            - -c
            - |
              kc=/var/run/secrets/hosted_cluster/kubeconfig
              kubectl --kubeconfig $kc config set clusters.default.server "https://[${KUBERNETES_SERVICE_HOST}]:${KUBERNETES_SERVICE_PORT}"
              kubectl --kubeconfig $kc config set clusters.default.certificate-authority /hosted-ca/ca.crt
              kubectl --kubeconfig $kc config set users.admin.tokenFile /var/run/secrets/hosted_cluster/token
              kubectl --kubeconfig $kc config set contexts.default.cluster default
              kubectl --kubeconfig $kc config set contexts.default.user admin
              kubectl --kubeconfig $kc config set contexts.default.namespace openshift-multus
              kubectl --kubeconfig $kc config use-context default
          volumeMounts:
            - mountPath: /var/run/secrets/hosted_cluster
              name: hosted-cluster-api-access
          env:
            - name: KUBERNETES_SERVICE_PORT
              value: "{{.KubernetesServicePort}}"
            - name: KUBERNETES_SERVICE_HOST
              value: "{{.KubernetesServiceHost}}"
      automountServiceAccountToken: false
{{- end }}
      containers:
{{- if .HyperShiftEnabled}}
      # hosted-cluster-token creates a token with a custom path(/var/run/secrets/hosted_cluster/token)
      # The token path is included in the kubeconfig used by webhook container to talk to the hosted clusters API server
      - name: hosted-cluster-token
        image: "{{.TokenMinterImage}}"
        command: [ "/usr/bin/control-plane-operator", "token-minter" ]
        args:
          - --service-account-namespace=openshift-multus
          - --service-account-name=multus-ac
          - --token-audience={{.TokenAudience}}
          - --token-file=/var/run/secrets/hosted_cluster/token
          - --kubeconfig=/etc/kubernetes/kubeconfig
        resources:
          requests:
            cpu: 10m
            memory: 30Mi
        volumeMounts:
          - mountPath: /etc/kubernetes
            name: admin-kubeconfig
          - mountPath: /var/run/secrets/hosted_cluster
            name: hosted-cluster-api-access
{{- end }}
      - name: multus-admission-controller
        image: {{.MultusAdmissionControllerImage}}
        command:
        - /bin/bash
        - -c
        - |-
          set -euo pipefail
{{- if .HyperShiftEnabled}}
          retries=0
          while [ ! -f /var/run/secrets/hosted_cluster/token ]; do
            (( retries += 1 ))
            sleep 1
            if [[ "${retries}" -gt 30 ]]; then
              echo "$(date -Iseconds) - Hosted cluster token not found"
                exit 1
            fi
          done
{{- end }}
          exec /usr/bin/webhook \
            -bind-address=0.0.0.0 \
            -port=6443 \
            -tls-private-key-file=/etc/webhook/tls.key \
            -tls-cert-file=/etc/webhook/tls.crt \
{{- if .HyperShiftEnabled}}
            -encrypt-metrics=true \
            -metrics-listen-address=:9091 \
{{- else }}
            -metrics-listen-address=127.0.0.1:9091 \
{{- end }}
            -alsologtostderr=true \
            -ignore-namespaces=openshift-etcd,openshift-console,openshift-ingress-canary,{{.IgnoredNamespace}}
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook
          readOnly: True
{{- if .HyperShiftEnabled}}
        - mountPath: /var/run/secrets/hosted_cluster
          name: hosted-cluster-api-access
        - mountPath: /hosted-ca
          name: hosted-ca-cert
          readOnly: True
        env:
          - name: KUBECONFIG
            value: "/var/run/secrets/hosted_cluster/kubeconfig"
{{- end }}
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        ports:
        - name: metrics-port
          containerPort: 9091
{{- if not .HyperShiftEnabled}}
      - name: kube-rbac-proxy
        image: {{.KubeRBACProxyImage}}
        args:
        - --logtostderr
        - --secure-listen-address=:8443
        - --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
        - --upstream=http://127.0.0.1:9091/
        - --tls-private-key-file=/etc/webhook/tls.key
        - --tls-cert-file=/etc/webhook/tls.crt
        ports:
        - containerPort: 8443
          name: https
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - name: webhook-certs
          mountPath: /etc/webhook
          readOnly: True
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: multus-ac
      priorityClassName: "system-cluster-critical"
{{- else}}
      priorityClassName: "hypershift-control-plane"
{{- end }}
      restartPolicy: Always
{{- if not .ExternalControlPlane }}
      nodeSelector:
        node-role.kubernetes.io/master: ""
{{- else }}
      {{ if .HCPNodeSelector }}
      nodeSelector:
        {{ range $key, $value := .HCPNodeSelector }}
        "{{$key}}": "{{$value}}"
        {{ end }}
      {{ end }}
{{- end }}
      volumes:
      - name: webhook-certs
        secret:
{{- if .HyperShiftEnabled}}
          defaultMode: 0640
{{- end }}
          secretName: multus-admission-controller-secret
{{- if .HyperShiftEnabled}}
      - name: hosted-cluster-api-access
        emptyDir: {}
      - name: hosted-ca-cert
        secret:
          defaultMode: 0640
          secretName: root-ca
          items:
            - key: ca.crt
              path: ca.crt
      - name: admin-kubeconfig
        secret:
          defaultMode: 0640
          secretName: service-network-admin-kubeconfig
{{- if not (eq .RunAsUser "")}}
      securityContext:
        runAsUser: {{.RunAsUser}}
{{- end }}
      tolerations:
        - key: "hypershift.openshift.io/control-plane"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
        - key: "hypershift.openshift.io/cluster"
          operator: "Equal"
          value: {{.AdmissionControllerNamespace}}
          effect: "NoSchedule"
{{- else }}
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: Exists
        effect: NoSchedule
{{- end }}
