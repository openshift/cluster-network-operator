kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: multus
  namespace: openshift-multus
  annotations:
    kubernetes.io/description: |
      This daemon set launches the Multus networking component on each node.
    release.openshift.io/version: "{{.ReleaseVersion}}"
spec:
  selector:
    matchLabels:
      app: multus
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: multus
        component: network
        type: infra
        openshift.io/component: network
    spec:
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: "system-node-critical"
      tolerations:
      - operator: Exists
      serviceAccountName: multus
      initContainers:
      - name: cni-plugins
        image: {{.CNIPluginsImage}}
        command: 
          - /bin/bash
          - -c
          - |
            #!/bin/bash
            set -x
            . /host/etc/os-release
            rhelmajor=
            # detect which version we're using in order to copy the proper binaries
            case "${ID}" in
              rhcos) rhelmajor=8
              ;;
              rhel) rhelmajor=$(echo "${VERSION_ID}" | cut -f 1 -d .) 
              ;;
              fedora)
                if [ "${VARIANT_ID}" == "coreos" ]; then
                  rhelmajor=8
                else 
                  echo "FATAL ERROR: Unsupported Fedora variant=${VARIANT_ID}"
                  exit 1
                fi
              ;;
              *) echo "FATAL ERROR: Unsupported OS ID=${ID}"; exit 1
              ;;
            esac
            # Set which directory we'll copy from, detect if it exists
            # When it doesn't exist, fall back to the original directory.
            SOURCEDIR=/usr/src/plugins/rhel${rhelmajor}/bin/
            if [ -d "${SOURCEDIR}" ]; then
              echo "Detected OS version ${rhelmajor}, ${SOURCEDIR} exists"
            else
              echo "Source directory unavailable for OS version: ${rhelmajor}"
              SOURCEDIR=/usr/src/plugins/bin/
            fi
            cp -rf ${SOURCEDIR}* /host/opt/cni/bin

        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cnibin
        - mountPath: /host/etc/os-release
          name: os-release
          readOnly: true
      - name: multus-binary-copy
        image: {{.MultusImage}}
        command:
          - /bin/bash
          - -c
          - |
            #!/bin/bash
            set -x
            . /host/etc/os-release
            rhelmajor=
            # detect which version we're using in order to copy the proper binaries
            case "${ID}" in
              rhcos) rhelmajor=8
              ;;
              rhel) rhelmajor=$(echo "${VERSION_ID}" | cut -f 1 -d .)
              ;;
              fedora)
                if [ "${VARIANT_ID}" == "coreos" ]; then
                  rhelmajor=8
                else
                  echo "FATAL ERROR: Unsupported Fedora variant=${VARIANT_ID}"
                  exit 1
                fi
              ;;
              *) echo "FATAL ERROR: Unsupported OS ID=${ID}"; exit 1
              ;;
            esac
            # Set which directory we'll copy from, detect if it exists
            # When it doesn't exist, fall back to the original directory.
            SOURCEDIR=/usr/src/multus-cni/rhel${rhelmajor}/bin
            if [ -d "${SOURCEDIR}" ]; then
              echo "Detected OS version ${rhelmajor}, ${SOURCEDIR} exists"
            else
              echo "Source directory unavailable for OS version: ${rhelmajor}"
              SOURCEDIR=/usr/src/multus-cni/bin
            fi
            # Copy to a temporary filename and then perform a rename to make
            # for an atomic operation.
            cp -f ${SOURCEDIR}/multus /host/opt/cni/bin/_multus
            mv -f /host/opt/cni/bin/_multus /host/opt/cni/bin/multus

        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cnibin
        - mountPath: /host/etc/os-release
          name: os-release
          readOnly: true
      containers:
      - name: kube-multus
        image: {{.MultusImage}}
        command: ["/entrypoint.sh"]
        args:
        - "--multus-conf-file=auto"
        - "--multus-autoconfig-dir=/host/var/run/multus/cni/net.d"
        - "--multus-kubeconfig-file-host=/etc/kubernetes/cni/net.d/multus.d/multus.kubeconfig"
        - "--readiness-indicator-file=/var/run/multus/cni/net.d/80-openshift-network.conf"
        - "--cleanup-config-on-exit=true"
        - "--namespace-isolation=true"
        - "--multus-log-level=verbose"
        - "--cni-version=0.3.1"
        - "--additional-bin-dir=/opt/multus/bin"
        - "--skip-multus-binary-copy=true"
        resources:
          requests:
            cpu: 10m
            memory: 150Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: system-cni-dir
          mountPath: /host/etc/cni/net.d
        - name: multus-cni-dir
          mountPath: /host/var/run/multus/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
        env:
        - name: KUBERNETES_SERVICE_PORT
          value: "{{.KUBERNETES_SERVICE_PORT}}"
        - name: KUBERNETES_SERVICE_HOST
          value: "{{.KUBERNETES_SERVICE_HOST}}"
      volumes:
        - name: system-cni-dir
          hostPath:
            path: {{ .SystemCNIConfDir }}
        - name: multus-cni-dir
          hostPath:
            path: {{ .MultusCNIConfDir }}
        - name: cnibin
          hostPath:
            path: /var/lib/cni/bin
        - name: os-release
          hostPath:
            path: /etc/os-release
            type: File
