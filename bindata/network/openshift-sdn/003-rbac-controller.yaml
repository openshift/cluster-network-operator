# We need to create this because the controller expects it to exist, and we're
# the first openshift-specific code running. Other code will manipulate the
# namespace later.
apiVersion: v1
kind: Namespace
metadata:
  name: openshift-infra

---
# The controller also requires a service account in openshift-infra
# It will use this manually, regardless of which account is configured in the pod
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sdn-controller
  namespace: openshift-infra

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sdn-controller
  namespace: openshift-sdn

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: openshift-sdn-controller
rules:
- apiGroups: [""]
  resources:
  - namespaces
  verbs:
  - list
  - get
  - watch
- apiGroups: ["network.openshift.io"]
  resources:
  - clusternetworks
  - egressnetworkpolicies
  - hostsubnets
  - netnamespaces
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
- apiGroups: [""]
  resources:
  - nodes
  verbs:
  - list
  - get
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openshift-sdn-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-sdn-controller
subjects:
- kind: ServiceAccount
  name: sdn-controller
  namespace: openshift-sdn

---
# bind the openshift-sdn-controller role to the service-account in openshift-infra
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openshift-sdn-controller-infra
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-sdn-controller
subjects:
- kind: ServiceAccount
  name: sdn-controller
  namespace: openshift-infra

---
# Only grant access to the specific config map for leader election
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: openshift-sdn-controller-leaderelection
  namespace: openshift-sdn
rules:
- apiGroups: [""]
  resources:
  - configmaps
  verbs:
  - create
  - update
  - patch
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - events
  verbs:
  - create
  - patch
  - update

---
# Bind leader-election access
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openshift-sdn-controller-leaderelection
  namespace: openshift-sdn
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openshift-sdn-controller-leaderelection
subjects:
- kind: ServiceAccount
  name: sdn-controller
  namespace: openshift-sdn

---
# The controller synthesizes its own authentication, so we need to let it
# read *and* list secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: openshift-sdn-controller-account
  namespace: openshift-infra
rules:
- apiGroups: [""]
  resources:
  - serviceaccounts
  - secrets
  verbs:
  - get
  - list

---
# bind secret access
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openshift-sdn-controller-account
  namespace: openshift-infra
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openshift-sdn-controller-account
subjects:
- kind: ServiceAccount
  name: sdn-controller
  namespace: openshift-sdn
