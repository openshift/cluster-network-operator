apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: sdn-controller
  namespace: openshift-sdn
  annotations:
    kubernetes.io/description: |
      This deployment runs the openshift SDN networking controller.
    release.openshift.io/version: "{{.ReleaseVersion}}"
  labels:
    app: sdn-controller
spec:
  selector:
    matchLabels:
      app: sdn-controller
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        app: sdn-controller
    spec:
      containers:
      - name: sdn-controller
        image: {{.SDNImage}}
        command:
        - /bin/bash
        - -c
        - |
          if [[ -f /env/_master ]]; then
            set -o allexport
            source /env/_master
            set +o allexport
          fi

          exec openshift-sdn-controller \
           --platform-type {{.PlatformType}} \
           --v=${OPENSHIFT_SDN_LOG_LEVEL:-2}
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        env:
        # point sdn-controller to the internal apiserver load balancer
        - name: KUBERNETES_SERVICE_PORT
          value: "{{.KUBERNETES_SERVICE_PORT}}"
        - name: KUBERNETES_SERVICE_HOST
          value: "{{.KUBERNETES_SERVICE_HOST}}"
{{ if .HTTP_PROXY }}
        - name: "HTTP_PROXY"
          value: "{{ .HTTP_PROXY}}"
{{ end }}
{{ if .HTTPS_PROXY }}
        - name: "HTTPS_PROXY"
          value: "{{ .HTTPS_PROXY}}"
{{ end }}
{{ if .NO_PROXY }}
        - name: "NO_PROXY"
          value: "{{ .NO_PROXY}}"
{{ end }}
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /env
          name: env-overrides
      - name: kube-rbac-proxy
        image: {{.KubeRBACProxyImage}}
        command:
          - /bin/bash
          - -c
          - |
            #!/bin/bash
            set -euo pipefail
            TLS_PK=/etc/pki/tls/metrics-certs/tls.key
            TLS_CERT=/etc/pki/tls/metrics-certs/tls.crt

            # As the secret mount is optional we must wait for the files to be present.
            # The service is created in monitor.yaml and this is created in controller.yaml.
            # If it isn't created there is probably an issue so we want to crashloop.
            TS=$(date +%s)
            WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
            HAS_LOGGED_INFO=0

            log_missing_certs(){
                CUR_TS=$(date +%s)
                if [[ "${CUR_TS}" -gt "${WARN_TS}"  ]]; then
                  echo $(date -Iseconds) WARN: sdn-controller-metrics-certs not mounted after 20 minutes.
                elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
                  echo $(date -Iseconds) INFO: sdn-controller-metrics-certs not mounted. Waiting 20 minutes.
                  HAS_LOGGED_INFO=1
                fi
            }

            while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
              log_missing_certs
              sleep 5
            done

            echo $(date -Iseconds) INFO: sdn-controller-metrics-certs mounted, starting kube-rbac-proxy
            exec /usr/bin/kube-rbac-proxy \
              --logtostderr \
              --secure-listen-address=:9106 \
              --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 \
              --upstream=http://127.0.0.1:29100/ \
              --tls-private-key-file=${TLS_PK} \
              --tls-cert-file=${TLS_CERT}
        ports:
          - containerPort: 9106
            name: https
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: sdn-controller-metrics-certs
            mountPath: /etc/pki/tls/metrics-certs
            readOnly: True
      hostNetwork: true
{{- if not .ExternalControlPlane }}
      nodeSelector:
        node-role.kubernetes.io/master: ""
{{- end }}
      priorityClassName: "system-cluster-critical"
      restartPolicy: Always
      serviceAccountName: sdn-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoSchedule"
      volumes:
      - name: env-overrides
        configMap:
          name: env-overrides
          optional: true
      # Must be optional because the sdn-controller-metrics-certs is a service serving
      # certificate and those cannot be generated without the SDN running
      - name: sdn-controller-metrics-certs
        secret:
          secretName: sdn-controller-metrics-certs
          optional: true
